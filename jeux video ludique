# Représentation d'une carte simple (ici, une grille 5x5)
carte_largeur = 5
carte_hauteur = 5

# Position initiale du joueur (x, y)
# (0,0) serait le coin supérieur gauche
position_joueur_x = 0
position_joueur_y = 0

print(f"Position initiale du joueur : ({position_joueur_x}, {position_joueur_y})")

# Fonction pour déplacer le joueur
def deplacer_joueur(direction):
    global position_joueur_x, position_joueur_y # Permet de modifier les variables globales

    if direction == "nord":
        if position_joueur_y > 0: # S'assure que le joueur ne sort pas de la carte
            position_joueur_y -= 1
            print("Le joueur se déplace vers le nord.")
        else:
            print("Impossible d'aller plus au nord, vous êtes au bord de la carte.")
    elif direction == "sud":
        if position_joueur_y < carte_hauteur - 1:
            position_joueur_y += 1
            print("Le joueur se déplace vers le sud.")
        else:
            print("Impossible d'aller plus au sud, vous êtes au bord de la carte.")
    elif direction == "est":
        if position_joueur_x < carte_largeur - 1:
            position_joueur_x += 1
            print("Le joueur se déplace vers l'est.")
        else:
            print("Impossible d'aller plus à l'est, vous êtes au bord de la carte.")
    elif direction == "ouest":
        if position_joueur_x > 0:
            position_joueur_x -= 1
            print("Le joueur se déplace vers l'ouest.")
        else:
            print("Impossible d'aller plus à l'ouest, vous êtes au bord de la carte.")
    else:
        print("Direction invalide. Utilisez 'nord', 'sud', 'est' ou 'ouest'.")

    print(f"Nouvelle position du joueur : ({position_joueur_x}, {position_joueur_y})")

# Exemples de mouvements
deplacer_joueur("est")
deplacer_joueur("sud")
deplacer_joueur("nord")
deplacer_joueur("nord") # Essai de sortir de la carte
deplacer_joueur("inconnu")

class ConvertisseurQuantique:
    def __init__(self, efficacite=1.0):
        self.efficacite = efficacite # Facteur d'efficacité du convertisseur (peut être amélioré)
        self.c_carre = 90000000000000000 # Une constante arbitraire pour le jeu (représentant c^2)

    def convertir_masse_en_energie(self, masse_kg):
        """Convertit la masse en énergie, selon E=mc^2."""
        if masse_kg <= 0:
            print("Veuillez fournir une masse positive.")
            return 0
        energie_produite = masse_kg * self.c_carre * self.efficacite
        print(f"Conversion: {masse_kg} kg de matière -> {energie_produite} unités d'énergie pure.")
        return energie_produite

    def convertir_energie_en_masse(self, energie_units):
        """Convertit l'énergie en masse (pour créer des matériaux spécifiques)."""
        if energie_units <= 0:
            print("Veuillez fournir une énergie positive.")
            return 0
        masse_produite = energie_units / (self.c_carre * self.efficacite)
        print(f"Conversion: {energie_units} unités d'énergie -> {masse_produite} kg de matière synthétique.")
        return masse_produite

# Utilisation dans le jeu
mon_convertisseur = ConvertisseurQuantique()
energie_obtenue = mon_convertisseur.convertir_masse_en_energie(10) # Convertir 10 kg de ferraille
materiau_synthetique = mon_convertisseur.convertir_energie_en_masse(1000000000000000000) # Créer un matériau

class Joueur:
    def __init__(self):
        self.masse_actuelle = 70 # kg
        self.gravite_multiplicateur = 1.0
        self.collision_active = True
        self.vitesse_saut = 5.0
        self.est_mode_masse_nulle = False

    def activer_mode_masse_nulle(self, duree_secondes):
        if not self.est_mode_masse_nulle:
            print("Mode Masse Nulle activé ! Le joueur flotte et ignore certaines collisions.")
            self.est_mode_masse_nulle = True
            self.masse_actuelle = 0.001 # Masse presque nulle pour la physique du jeu
            self.gravite_multiplicateur = 0.1 # Flotte plus
            self.collision_active = False # Ignore certaines collisions (à gérer par le moteur)
            self.vitesse_saut *= 3 # Sauts plus hauts
            # Simuler la désactivation après 'duree_secondes'
            import threading
            timer = threading.Timer(duree_secondes, self.desactiver_mode_masse_nulle)
            timer.start()
        else:
            print("Le mode Masse Nulle est déjà actif.")

    def desactiver_mode_masse_nulle(self):
        if self.est_mode_masse_nulle:
            print("Mode Masse Nulle désactivé. Retour à la normale.")
            self.est_mode_masse_nulle = False
            self.masse_actuelle = 70
            self.gravite_multiplicateur = 1.0
            self.collision_active = True
            self.vitesse_saut = 5.0

# Utilisation
mon_joueur = Joueur()
mon_joueur.activer_mode_masse_nulle(10) # Le joueur est en mode masse nulle pendant 10 secondes

class PuzzleAnomalie:
    def __init__(self, id_puzzle):
        self.id = id_puzzle
        self.elements_actifs = 0
        self.barriere_ouverte = False

    def activer_element(self):
        self.elements_actifs += 1
        print(f"Élément activé. Total : {self.elements_actifs}/4")
        self._verifier_condition()

    def _verifier_condition(self):
        if self.elements_actifs == 4:
            # Simuler l'effet 4/4 = 0
            if not self.barriere_ouverte:
                print(f"Anomalie {self.id}: Condition 4/4 atteinte. La barrière s'annule (devient 0) !")
                self.barriere_ouverte = True
                # Réinitialiser les éléments pour une prochaine tentative ou interaction
                self.elements_actifs = 0
            else:
                print(f"Anomalie {self.id}: Déjà réinitialisée.")
        elif self.elements_actifs > 4:
            print(f"Anomalie {self.id}: Surcharge. Les éléments se réinitialisent.")
            self.elements_actifs = 0 # Réinitialisation si trop d'éléments actifs

# Utilisation
puzzle_ancien_vault = PuzzleAnomalie("Vault 7")
puzzle_ancien_vault.activer_element()
puzzle_ancien_vault.activer_element()
puzzle_ancien_vault.activer_element()
puzzle_ancien_vault.activer_element() # La barrière s'ouvre

class ZoneVide:
    def __init__(self, nom_zone, position_centre):
        self.nom = nom_zone
        self.position = position_centre
        self.ressource_speciale = "Essence de Vide"
        self.malus_actif = True

    def entrer_zone(self, joueur):
        print(f"Le joueur {joueur.nom} entre dans la {self.nom}.")
        if self.malus_actif:
            print("Attention ! Les systèmes sont perturbés dans cette zone de vide.")
            joueur.appliquer_malus("perturbation_vide") # Appel à une fonction du joueur pour appliquer des effets
        # Vérifier et donner de la ressource
        if not self._ressource_collectee:
            print(f"Vous détectez une {self.ressource_speciale} rare !")
            joueur.inventaire.ajouter_item(self.ressource_speciale, 1)
            self._ressource_collectee = True # Une ressource par visite ou par respawn

    def quitter_zone(self, joueur):
        print(f"Le joueur {joueur.nom} quitte la {self.nom}.")
        joueur.retirer_malus("perturbation_vide")

# (Dans la classe Joueur)
# def appliquer_malus(self, type_malus):
#     if type_malus == "perturbation_vide":
#         self.hud_actif = False
#         self.precision_arme *= 0.5
# def retirer_malus(self, type_malus):
#     if type_malus == "perturbation_vide":
#         self.hud_actif = True
#         self.precision_arme *= 2.0

class MecanismeFractionne:
    def __init__(self, nom_mecanisme):
        self.nom = nom_mecanisme
        self.condition_un = 0 # Par exemple, temps activé, ou nombre d'items
        self.condition_deux = 0

    def set_condition_un(self, valeur):
        self.condition_un = valeur
        self._verifier_ouverture()

    def set_condition_deux(self, valeur):
        self.condition_deux = valeur
        self._verifier_ouverture()

    def _verifier_ouverture(self):
        # La condition 4/8, ou 1/2
        # On vérifie si condition_deux est le double de condition_un (ou vice versa)
        if self.condition_un > 0 and self.condition_deux > 0:
            if (self.condition_deux / self.condition_un == 2.0) or \
               (self.condition_un / self.condition_deux == 2.0):
                print(f"Mecanisme {self.nom} : Conditions remplies (Ratio 1:2). Le passage s'ouvre !")
            else:
                print(f"Mecanisme {self.nom} : Ratio incorrect ({self.condition_un}:{self.condition_deux}).")
        else:
            print(f"Mecanisme {self.nom} : Conditions non suffisantes pour vérifier le ratio.")

# Utilisation (exemple de puzzle avec temps)
porte_ancetres = MecanismeFractionne("Porte des Ancêtres")
# Le joueur active un levier pour 4 secondes
porte_ancetres.set_condition_un(4)
# Le joueur active un second levier pour 8 secondes
porte_ancetres.set_condition_deux(8)
