base64 agent.py > agent_base64.txt

git clone https://github.com/Royalcoco/dockers.git
cd dockers

git add .
git commit -m "Ajout de BaliseNet : syst√®me de diffusion de balises binaires en LAN"
git push origin main

dockers/
‚îî‚îÄ‚îÄ balisenet/
    ‚îú‚îÄ‚îÄ agent.py
    ‚îî‚îÄ‚îÄ config.yaml
node_id: BX-001
port: 5050
broadcast_ip: 255.255.255.255
interval_ms: 2000

# BaliseNet - agent.py

import socket
import time
import yaml
import hashlib
import base64
import os

# === utils.py ===
def generate_binary_id(text):
    return ''.join(format(ord(c), '08b') for c in text)

def hash_id(text):
    return hashlib.sha256(text.encode()).hexdigest()[:8]

def encode_file_to_base64(path):
    with open(path, "rb") as f:
        return base64.b64encode(f.read()).decode()

def decode_base64_to_file(data, path):
    with open(path, "wb") as f:
        f.write(base64.b64decode(data))

# === processor.py ===
def process_flux(binary_data):
    print("\n‚ü≥ Cylindres tournent...")
    split = [binary_data[i:i+8] for i in range(0, len(binary_data), 8)]
    for i, block in enumerate(split):
        mode = "droit" if i % 2 == 0 else "quinconce"
        print(f"‚Üª Cylindre {i:02d} ({mode}) : {block}")

# === config.yaml ===
# Contenu de ce fichier √† cr√©er √† c√¥t√© de agent.py
# ---
# node_id: BX-001
# port: 5050
# broadcast_ip: 255.255.255.255
# interval_ms: 2000
# deploy_path: deployed_agent.py

# === Main Agent ===
def load_config():
    with open("config.yaml") as f:
        return yaml.safe_load(f)

def send_beacon(sock, config, binary):
    sock.sendto(binary.encode(), (config["broadcast_ip"], config["port"]))
    print(f"\nüì§ Balise envoy√©e : {binary}")

def send_encoded_file(sock, config, filepath):
    encoded = encode_file_to_base64(filepath)
    print("\nüì§ Script encod√© et envoy√© via balise")
    sock.sendto(encoded.encode(), (config["broadcast_ip"], config["port"]))

def listen_for_beacons(sock, my_id, config):
    sock.settimeout(0.5)
    try:
        data, addr = sock.recvfrom(65535)
        message = data.decode()
        if my_id not in message:
            if len(message) > 300:  # Probablement un script encod√©
                print(f"üì• Script d√©tect√© depuis {addr[0]} - d√©ploiement en cours")
                decode_base64_to_file(message, config["deploy_path"])
                print(f"‚úÖ Script d√©ploy√© sous {config['deploy_path']}")
            else:
                print(f"üì• Balise re√ßue de {addr[0]} : {message}")
                process_flux(message)
    except socket.timeout:
        pass

def main():
    config = load_config()
    node_id = config["node_id"]
    short_hash = hash_id(node_id)
    binary_beacon = generate_binary_id(short_hash)

    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
    sock.bind(("", config["port"]))

    print(f"üîß BaliseNet Node '{node_id}' initialis√©e sur port {config['port']}\n")

    while True:
        send_beacon(sock, config, binary_beacon)
        listen_for_beacons(sock, short_hash, config)
        time.sleep(config["interval_ms"] / 1000)

if __name__ == "__main__":
    main()
    # Pour transmettre un script entier, d√©commente et adapte cette ligne :
    # send_encoded_file(sock, config, "agent.py")

node_id: BX-001
port: 5050
broadcast_ip: 255.255.255.255
interval_ms: 2000
deploy_path: deployed_agent.py

send_encoded_file(sock, config, "agent.py")
