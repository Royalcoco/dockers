donateur_sim/
├── services/
│   ├── phantom_node/      ← analyse & tokenisation
│   ├── analyze/           ← analyse de fichiers & tokens
│   ├── donate_core/       ← logique de don IA + simulation récipient
│   └── watch/             ← logs, chat, visualisation
├── web_front/
│   ├── public/            ← CSS, JS, QR code, animations
│   └── index.html         ← UI intégrée
├── docker-compose.yml     ← orchestration des services
├── C# Launcher (option)   ← démarrage automatisé
└── README.md
version: "3.8"
services:
  phantom:
    build: ./services/phantom_node
    ports: ["5001:5000"]
  analyze:
    build: ./services/analyze
    ports: ["5002:5000"]
  donate:
    build: ./services/donate_core
    ports: ["5003:5000"]
  watch:
    build: ./services/watch
    ports: ["5004:6000"]
  front:
    build: ./web_front
    ports: ["8080:80"]
donate_core/
├── app/
│   ├── main.py
│   └── utils.py
├── requirements.txt
└── Dockerfile
Flask
flask-socketio
eventlet
pyttsx3
from datetime import datetime
import pyttsx3

engine = pyttsx3.init()
donations = []
beneficiaries = []

def log(msg):
    ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    entry = f"[{ts}] {msg}"
    donations.append(entry)
    return entry

def add_beneficiary(name, need):
    beneficiaries.append({"name": name, "need": need, "received": False})
    return beneficiaries[-1]
from flask import Flask, jsonify, request
from flask_socketio import SocketIO, emit
from app.utils import log, add_beneficiary, donations, beneficiaries

app = Flask(__name__)
socketio = SocketIO(app, cors_allowed_origins="*")

# ajouter bénéficiaires fictifs
add_beneficiary("Alice", "vêtements")
add_beneficiary("Bob", "nourriture")

@app.route("/beneficiaries")
def get_beneficiaries():
    return jsonify(beneficiaries)

@app.route("/donate", methods=["POST"])
def donate():
    data = request.json
    donor = data["donor"]
    amount = data["amount"]
    ben = next((b for b in beneficiaries if not b["received"]), None)
    if not ben:
        return jsonify({"status": "none"}), 400

    ben["received"] = True
    entry = log(f"{donor} donated {amount} IAcoin to {ben['name']} for {ben['need']}")
    engine.say(f"Donation autorisée à {ben['name']}")
    engine.runAndWait()
    socketio.emit("donation", entry)
    return jsonify({"status": "ok", "beneficiary": ben})

@socketio.on("connect")
def on_connect():
    emit("init", {"donations": donations})

if __name__ == "__main__":
    socketio.run(app, host="0.0.0.0", port=5000)
FROM python:3.11-slim
WORKDIR /app
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
COPY app app
CMD ["python", "-u", "app/main.py"]
front/
├── public/
│   ├── index.html
│   ├── style.css
│   └── three.min.js
├── Dockerfile
└── requirements.txt
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>IA Donation Hub</title>
<link rel="stylesheet" href="style.css">
<script src="https://cdn.jsdelivr.net/npm/qrcode/build/qrcode.min.js"></script>
<script src="https://cdn.socket.io/4.7.2/socket.io.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r134/three.min.js"></script>
</head>
<body>
  <h1>IA Donation Hub</h1>
  <div id="canvas3d"></div>
  <button onclick="simulate()">Simuler don</button>
  <ul id="logs"></ul>

<script>
const socket = io('http://donate_core:5000');
socket.on('init', d => d.donations.forEach(addLog));
socket.on('donation', addLog);

// simple 3D scene
let scene = new THREE.Scene(),
    camera = new THREE.PerspectiveCamera(75, 2, 0.1, 1000),
    renderer = new THREE.WebGLRenderer();
renderer.setSize(400, 300);
document.getElementById('canvas3d').appendChild(renderer.domElement);

let geometry = new THREE.BoxGeometry();
let material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });
let cube = new THREE.Mesh(geometry, material);
scene.add(cube);
camera.position.z = 5;

function animate() {
  cube.rotation.x += 0.01;
  cube.rotation.y += 0.01;
  renderer.render(scene, camera);
  requestAnimationFrame(animate);
}
animate();

function addLog(txt) {
  const logs = document.getElementById('logs');
  const li = document.createElement('li');
  li.textContent = txt;
  logs.appendChild(li);
}

async function simulate() {
  const res = await fetch('http://donate_core:5000/donate', {
    method: 'POST',
    headers: {'Content-Type': 'application/json'},
    body: JSON.stringify({ donor: 'Opérateur', amount: 10 })
  }).then(r => r.json());
  if (res.status === 'ok') addLog(`Don simulé vers ${res.beneficiary.name}`);
}
</script>
</body>
</html>
body { background: #111; color: #0f0; font-family: monospace; }
#canvas3d { margin: 10px auto; display: block; }
button { background: #222; color: #0f0; padding: 10px; border: 1px solid #0f0; }
FROM nginx:alpine
COPY public /usr/share/nginx/html
CMD ["nginx", "-g", "daemon off;"]
version: "3.8"
services:
  donate_core:
    build: ./donate_core
    ports: ["5000:5000"]
  front:
    build: ./front
    ports: ["8080:80"]
using System;
using System.Diagnostics;
class Program {
  static void Main() {
    Process.Start("docker-compose", "up --build -d");
    Console.WriteLine("Lancement... ouvrez http://localhost:8080");
    Console.WriteLine("Appuyez sur Entrée pour tout arrêter.");
    Console.ReadLine();
    Process.Start("docker-compose", "down");
  }
}
csc Launcher.cs
git clone https://github.com/Royalcoco/dockers.git
# ou
wget https://github.com/Royalcoco/dockers/archive/refs/heads/main.zip
unzip main.zip
cd dockers-main/
